/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewJFrame.java
 *
 * Created on Jun 6, 2013, 8:18:32 PM
 */
package bloodtypeDetect;

import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;

/**
 *
 * @author izmy
 */
public class RhesusRecog extends javax.swing.JFrame {
    BufferedImage avg_grayAdj;
    double energy, contrast, homogeniety,correlation, dis, entropy;
    /** Creates new form NewJFrame */
    public RhesusRecog() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        btn_open = new javax.swing.JButton();
        image = new javax.swing.JLabel();
        lbl_greyscale = new javax.swing.JLabel();
        btn_intensity = new javax.swing.JButton();
        lbl_intensity = new javax.swing.JLabel();
        btn_deteksi = new javax.swing.JButton();
        lbl_rhesus = new javax.swing.JLabel();

        fileChooser.setDialogTitle("Cari Gambar");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Deteksi Rhesus");

        btn_open.setText("Grayscale");
        btn_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_openActionPerformed(evt);
            }
        });

        btn_intensity.setText("Intensity Adj.");
        btn_intensity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_intensityActionPerformed(evt);
            }
        });

        btn_deteksi.setText("Deteksi");
        btn_deteksi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deteksiActionPerformed(evt);
            }
        });

        lbl_rhesus.setFont(new java.awt.Font("Ding-DongDaddyO", 1, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(image, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_open)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbl_greyscale, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_intensity)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbl_intensity, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                .addGap(28, 28, 28))
            .addGroup(layout.createSequentialGroup()
                .addGap(312, 312, 312)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbl_rhesus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_deteksi, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(357, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(btn_open))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(btn_intensity))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lbl_intensity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbl_greyscale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(image, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addComponent(btn_deteksi)
                .addGap(33, 33, 33)
                .addComponent(lbl_rhesus, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void btn_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_openActionPerformed
// TODO add your handling code here:
    BufferedImage gambar = null;
    int red, green, blue;
    int newPixel;
    int returnVal = fileChooser.showOpenDialog(this);
    if(returnVal == JFileChooser.APPROVE_OPTION){
        File file = fileChooser.getSelectedFile();
        System.out.println(file);
            try {
                gambar = ImageIO.read(file);
                ImageIcon icon = new ImageIcon(gambar);
                image.setIcon(icon);
            } catch (IOException ex) {
                Logger.getLogger(RhesusRecog.class.getName()).log(Level.SEVERE, null, ex);
            }
        
    }
    BufferedImage avg_gray = new BufferedImage(gambar.getWidth(), gambar.getHeight(), gambar.getType());
    
 
    for(int i=0; i<gambar.getWidth(); i++) {
        for(int j=0; j<gambar.getHeight(); j++) {
            int rgb = gambar.getRGB(i, j);
            
            //merubah warna ke RGB
            red = rgb & 0x000000FF;
            green = (rgb & 0x0000FF00) >> 8;
            blue =  (rgb & 0x00FF0000) >> 16;
            
            int avg = (red + green + blue)/3;
            
            newPixel = avg+(avg<<8)+(avg<<16);
            avg_gray.setRGB(i, j, newPixel);
            
            
        }
    }
                ImageIcon icon1 = new ImageIcon(avg_gray);
                lbl_greyscale.setIcon(icon1);
                avg_grayAdj=avg_gray;
}//GEN-LAST:event_btn_openActionPerformed

private void btn_intensityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_intensityActionPerformed
    // TODO add your handling code here:
        int height = avg_grayAdj.getHeight();
        int width = avg_grayAdj.getWidth();
        int clr,max1,min,max;
        max1=0;
        max=0;

        int piksel[][] = new int[width][height];

        for(int i=0;i<width;i++){
            for(int j=0;j<height;j++){
                clr = avg_grayAdj.getRGB(i, j);

                int red = (clr &0x00ff0000) >> 16;
                int green = (clr &0x0000ff00) >> 8;
                int blue = clr &0x000000ff;

                piksel[i][j]=(red+green+blue)/3;

                //mencari batas atas dan bawah piksel
                if(piksel[i][j]>max1)
                    max1=piksel[i][j];

            }
        }
        
        System.out.println("piksel terkecil : "+max1);

        //adjustment intensity
        BufferedImage image_adj = new BufferedImage(avg_grayAdj.getWidth(), avg_grayAdj.getHeight(), avg_grayAdj.getType());
        String adjPiksel;
        double pikselA;
        min=255;
        for(int i=0;i<width;i++){
            for(int j=0;j<height;j++){
                //intensity adjustment
                pikselA=(255*piksel[i][j])/max1;
          

                DecimalFormat nf1 = new DecimalFormat("#");
                nf1.setRoundingMode(RoundingMode.UP);
                adjPiksel = nf1.format(pikselA);
                piksel[i][j]=Integer.parseInt(adjPiksel);

                //mencari batas atas dan bawah piksel
                if(piksel[i][j]>max)
                    max=piksel[i][j];
                if(piksel[i][j]<min)
                    min=piksel[i][j];
                System.out.print(piksel[i][j]+" ");
                int newPixel = piksel[i][j]+(piksel[i][j]<<8)+(piksel[i][j]<<16);
                image_adj.setRGB(i, j, newPixel);

            }
            System.out.println("");
        }

        System.out.println("GLCM");

        //Scale patched
        System.out.println("Scale Patched");
        System.out.println(max +" "+ min);
        int scalePatched[][] = new int [width][height];
        double tmp;
        String prob;
        for(int i=0;i<width;i++){
            for(int j=0;j<height;j++){

                double pixel = piksel[i][j];
                tmp=((pixel-(min-1))*20)/(max-(min-1));
                //System.out.print(tmp+" ");

                DecimalFormat nf = new DecimalFormat("#");
                nf.setRoundingMode(RoundingMode.UP);
                prob = nf.format(tmp);
                scalePatched[i][j]=Integer.parseInt(prob);

                System.out.print(scalePatched[i][j]+" ");
            }
            System.out.println("");
        }

        //GLCM
        int glcm[][] = new int [21][21];
        int a,b;
        for(int i=0;i<height;i++){
            for(int j=0;j<width-1;j++){
                a=scalePatched[j][i];
                b=scalePatched[j+1][i];
                glcm[a][b]=glcm[a][b]+1;
            }
        }
        System.out.println("GLCM");
        System.out.println("=============");
        glcm[0][0]=0;
        for(int i=1;i<=20;i++){
                glcm[i][0]=i;
                glcm[0][i]=i;
        }

        int total=0;
        for(int i=0;i<=20;i++){
            for(int j=0;j<=20;j++){
                System.out.print(glcm[i][j]+"\t");
                total=total+glcm[i][j];
            }
            System.out.println("");
        }
        System.out.println("");
        System.out.println("====================Nilai Ciri==================");
        //menghitung p(i,j)
        double p[][] = new double[21][21];
        for(int i=1;i<=20;i++){
            for(int j=1;j<=20;j++){
                p[i][j] = (double)glcm[i][j]/total;
            }
        }
        System.out.println("Total = "+total);
        //menghitung energy
        energy = 0.0;
        for(int i=1;i<=20;i++){
            for(int j=1;j<=20;j++){
                energy=Math.pow(p[i][j], 2)+energy;
            }
        }
        System.out.println("Energy : "+energy);

        //menghitung contrast
        contrast = 0.0;
        for(int i=1;i<=20;i++){
            for(int j=1;j<=20;j++){
                double ij = Math.abs(i-j);
                contrast = contrast+(Math.pow(ij, 2)*p[i][j]);
            }
        }
        System.out.println("Contrast : "+contrast);

        //menghitung homogenity
        homogeniety = 0.0;
        for(int i=1;i<=20;i++){
            for(int j=1;j<=20;j++){
                double ij = 1 + Math.abs(i-j);
                homogeniety = homogeniety+(p[i][j]/ij);
            }
        }
        System.out.println("Homogeneity : "+homogeniety);

        //menghitung correlation

        double meanI = 0.0;
        double meanJ = 0.0;
        double variance2I=0.0;
        double variance2J=0.0;
        double deviationI=0.0;
        double deviationJ=0.0;
        correlation = 0.0;

        //menghitung mean
        for(int i=1;i<=20;i++){
            for(int j=1;j<=20;j++){
                double mean = i*p[i][j];
                meanI = meanI+mean;
                mean = j*p[i][j];
                meanJ = meanJ+mean;
            }
        }

        //menghitung variance equation
        for(int i=1;i<=20;i++){
            for(int j=1;j<=20;j++){
                double variance = (p[i][j])*(Math.pow((i-meanI),2));
                variance2I = variance2I+variance;
                variance = (p[i][j])*(Math.pow((j-meanJ),2));
                variance2J = variance2J+variance;
            }
        }

        //standard deviation equation
        for(int i=1;i<=20;i++){
            deviationI=Math.sqrt(variance2I);
            deviationJ=Math.sqrt(variance2J);
        }

        for(int i=1;i<=20;i++){
            for(int j=1;j<=20;j++){
                double tmpCorrelation = 0.0;
                tmpCorrelation = p[i][j]*(((i-meanI)*(j-meanJ)) / ((deviationI)*(deviationJ)));
                correlation = correlation + tmpCorrelation;
            }
        }
        System.out.println("Correlation : " + correlation);

        //menghitung dissimilarity
        dis = 0.0;
        for(int i=1;i<=20;i++){
            for(int j=1;j<=20;j++){
                double ij = Math.abs(i-j);
                dis = dis+(ij*p[i][j]);
            }
        }
        System.out.println("Dissimilarity : "+dis);

        //menghitung entropy
        double e = 2.71828183;
        entropy = 0.0;
        for(int i=1;i<=20;i++){
            for(int j=1;j<=20;j++){
                if(p[i][j]==0)
                    entropy=entropy+0;
                else
                    entropy = entropy+(p[i][j]*(-(Math.log(p[i][j])/Math.log(e))));
            }
        }
        System.out.println("entropy : "+entropy);
        System.out.println(energy+" "+contrast+" "+homogeniety+" "+correlation+" "+dis+" "+entropy);
        ImageIcon icon1 = new ImageIcon(image_adj);
        lbl_intensity.setIcon(icon1);
}//GEN-LAST:event_btn_intensityActionPerformed

private void btn_deteksiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deteksiActionPerformed
    // TODO add your handling code here:
    int baris = 12; int kolom = 7;
    double jarak_min=100;
    int k=0;
    String[] rhesus = new String[baris];
    String hsl=null;

  try{
  // membaca file
  FileInputStream fstream = new FileInputStream("/home/izmy/NetBeansProjects/RhesusRecog/src/BloodRhType/rhesus.txt");
  DataInputStream in = new DataInputStream(fstream);
  BufferedReader br = new BufferedReader(new InputStreamReader(in));
  String[] strLine;
  
  double[][] fitur = new double[baris][kolom];

  //mapping file ke text
  //partisi text ke array
  for(int i=0; i<baris;i++ ){
      strLine = br.readLine().split("\\s");
      for(int j=0; j<kolom;j++){
          fitur[i][j]=Double.parseDouble(strLine[j]);
          System.out.print(fitur[i][j]+" ");
      }
      rhesus[i]= strLine[7];
      System.out.print(strLine[7]);
      System.out.println("");
      //menghitung jarak data uji dengan data latih
      double[] jarak = new double[baris];
      double a = Math.pow((energy-fitur[i][1]), 2)+Math.pow((contrast-fitur[i][2]), 2)
              +Math.pow((homogeniety-fitur[i][3]), 2)+Math.pow((correlation-fitur[i][4]), 2)
              +Math.pow((dis-fitur[i][5]), 2)+Math.pow((entropy-fitur[i][6]), 2);
      jarak[i]=Math.sqrt(a);
      System.out.println("Jarak data uji dengan data latih ke-"+i+" adalah "+jarak[i]);

      if(jarak[i]<jarak_min)
      {
          jarak_min=jarak[i];
          k=i;
          hsl = rhesus[k];
      }
  }


  //menutup input stream
  in.close();
    }catch (Exception e){//Catch exception if any
  System.err.println("Error: " + e.getMessage());
  }
    lbl_rhesus.setText("Rhesus "+hsl);
    System.out.println("jarak min "+jarak_min);
    System.out.println("k= "+k);
}//GEN-LAST:event_btn_deteksiActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RhesusRecog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RhesusRecog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RhesusRecog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RhesusRecog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new RhesusRecog().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_deteksi;
    private javax.swing.JButton btn_intensity;
    private javax.swing.JButton btn_open;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel image;
    private javax.swing.JLabel lbl_greyscale;
    private javax.swing.JLabel lbl_intensity;
    private javax.swing.JLabel lbl_rhesus;
    // End of variables declaration//GEN-END:variables
}
